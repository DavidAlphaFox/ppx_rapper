let f dbh =
  let (>>=) = IO.bind  in
  let query = "SELECT TRUE"  in
  let params = [||]  in
  let process_out_params row =
    let (=) = Ppx_mysql_runtime.Stdlib.(=)  in
    let len_row = Ppx_mysql_runtime.Stdlib.Array.length row  in
    if len_row = 0
    then
      try Ppx_mysql_runtime.Stdlib.Result.Ok ()
      with
      | Ppx_mysql_runtime.Deserialization_error (f,v) ->
          Ppx_mysql_runtime.Stdlib.Result.Error
            (`Deserialization_error (f, v))
      | Invalid_argument _ ->
          Ppx_mysql_runtime.Stdlib.Result.Error `Expected_non_null_column
    else
      Ppx_mysql_runtime.Stdlib.Result.Error
        (`Unexpected_number_of_rows (len_row, 0))
    [@@warning "-26"] in
  (Prepared.create dbh query) >>=
    (fun stmt  ->
       (Prepared.execute_null stmt params) >>=
         (fun stmt_result  ->
            ((fun ()  ->
                let rec loop acc =
                  (Prepared.fetch stmt_result) >>=
                    (fun maybe_row  ->
                       match (acc, maybe_row) with
                       | ([],Ppx_mysql_runtime.Stdlib.Option.Some row) ->
                           (match process_out_params row with
                            | Ppx_mysql_runtime.Stdlib.Result.Ok row' ->
                                loop [row']
                            | Ppx_mysql_runtime.Stdlib.Result.Error _ as err
                                -> IO.return err)
                       | ([],Ppx_mysql_runtime.Stdlib.Option.None ) ->
                           IO.return
                             (Ppx_mysql_runtime.Stdlib.Result.Error
                                `Expected_one_found_none)
                       | (_::_,Ppx_mysql_runtime.Stdlib.Option.Some _) ->
                           IO.return
                             (Ppx_mysql_runtime.Stdlib.Result.Error
                                `Expected_one_found_many)
                       | (hd::_,Ppx_mysql_runtime.Stdlib.Option.None ) ->
                           IO.return (Ppx_mysql_runtime.Stdlib.Result.Ok hd))
                   in
                loop []) ())
              >>=
              (fun result  ->
                 (Prepared.close stmt) >>= (fun ()  -> IO.return result))))
  
